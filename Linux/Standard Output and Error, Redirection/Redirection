### Redirection Operators

- `>`  
    The `>` operator in Linux is used to redirect standard output (stdout) from a command to a file.
    
    #### How It Works:
    
    - When you use `command > filename`, the output of the command is written to `filename`.
    - If `filename` already exists, it will be **overwritten**.
    
    #### Example:
    
    ```bash
    echo "Hello, World!" > output.txt
    ```

    - This command creates (or overwrites) `output.txt` with the text "Hello, World!". If `output.txt` already had content, that content will be lost.

- `>>`  
    The `>>` operator in Linux is used to append standard output (stdout) from a command to a file.
    
    #### How It Works:
    
    - When you use `command >> filename`, the output of the command is added to the **end** of `filename`.
    - If `filename` does not exist, it will be **created**.
    
    #### Example:
    
    ```bash
    echo "Hello again!" >> output.txt
    ```

    - This command adds the text "Hello again!" to the end of `output.txt`. If `output.txt` already contains some text, this new text will be added after the existing content without overwriting it.

---

### Redirecting Standard Errors

In Linux, the `2` refers to **Standard Error (stderr)**, which is associated with file descriptor `2`. This output stream is used for error messages and diagnostics. You can also redirect stderr to a file using similar operators as for stdout.

#### Redirecting Standard Error (stderr) to a File

1. **Overwrite a File**:
   - Use the `2>` operator to redirect stderr to a file, overwriting the file if it exists.
    
    ```bash
    command 2> error.txt
    ```

    - This command will redirect any error messages generated by `command` to `error.txt`.

2. **Append to a File**:
   - Use the `2>>` operator to append stderr to an existing file without deleting its content.

    ```bash
    command 2>> error.txt
    ```

    - This command will add any error messages generated by `command` to the end of `error.txt`.

#### Example Commands

- **Overwriting stderr**:
    
    ```bash
    ls non_existent_file 2> error.log
    ```

    - This attempts to list a non-existent file, and the error message ("ls: cannot access 'non_existent_file': No such file or directory") is written to `error.log`, overwriting any existing content.

- **Appending stderr**:
    
    ```bash
    ls another_non_existent_file 2>> error.log
    ```

    - This will append the error message for another non-existent file to `error.log` without losing previous error messages stored in the file.

---

### Summary

- Use `2>` to redirect stderr into a file, overwriting any existing data.
- Use `2>>` to append stderr to the end of a file, keeping existing data intact.

---

### Example: Redirecting Both stdout and stderr

To list the contents of the root directory (`/`) and redirect both standard output (stdout) and standard error (stderr) to a file, you can use the following command:

```bash
ls / > output.txt 2>&1
```

- `> output.txt` redirects the standard output to the file `output.txt`.
- `2>&1` redirects the standard error to the same file that standard output is being sent to (in this case, `output.txt`).
